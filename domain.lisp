(in-package :mu-cl-resources)

;;;;; product groups

;;;; define the resource
;; (define-resource product-group ()
;;   :class (s-url "http://veeakker.com/vocabulary/shop/ProductGroup")
;;   :properties `((:name :string ,(s-prefix "productGroup:name"))
;;                 (:sort-order :number ,(s-prefix "mu:sortOrder")))
;;   :resource-base (s-url "http://veeakker.com/api/product-groups/")
;;   :has-many `((product :via ,(s-url "http://veeakker.com/vocabulary/shop/hasProduct")
;;                        :as "products"))
;;   :on-path "product-groups")

;; (define-resource product ()
;;   :class (s-url "http://veeakker.com/vocabulary/shop/Product")
;;   :properties `((:name :string ,(s-prefix "product:name"))
;;                 (:price :number ,(s-prefix "product:price"))
;;                 (:price-per-kg :number ,(s-prefix "product:kg-price"))
;;                 (:fat :number ,(s-prefix "product:fat"))
;;                 (:joule :number ,(s-prefix "product:joule"))
;;                 (:allergenics :string ,(s-prefix "product:allergenics"))
;;                 (:sugars :string ,(s-prefix "product:sugars"))
;;                 (:ingredients :string ,(s-prefix "product:ingredients"))
;;                 (:image :string ,(s-prefix "product:image"))
;;                 (:promotion :number ,(s-prefix "product:promotion"))
;;                 (:producer :string ,(s-prefix "product:producerName"))
;;                 (:plu :string ,(s-prefix "product:plu")))
;;   :resource-base (s-url "http://veeakker.com/api/products/")
;;   :has-one `((product-group :via ,(s-url "http://veeakker.com/vocabulary/shop/hasProduct")
;;                             :inverse t
;;                             :as "product-group")
;;              ;; (producer :via ,(s-prefix "product:producer")
;;              ;;           :as "producer")
;;              )
;;   :on-path "products")

;; (define-resource producer ()
;;   :class (s-url "http://veeakker.com/vocabulary/shop/Producer")
;;   :properties `((:name :string ,(s-prefix "producer:name"))
;;                 (:description :string ,(s-prefix "dc:description"))
;;                 (:website :string ,(s-prefix "producer:website"))
;;                 (:long-description :string ,(s-prefix "producer:longDescription")))
;;   :resource-base (s-url "http://veeakker.com/api/producers/")
;;   :on-path "producers")


;; (define-resource challenge ()
;;   :class (s-prefix "ed:Challenge")
;;   :properties `((:title :string ,(s-prefix "dct:title"))
;;                 (:icon :string ,(s-prefix "ed:icon")))
;;   :resource-base (s-url "http://education.com/challenges/")
;;   :has-many `((technologies :via ,(s-prefix "ed:technology")
;;                             :as "technologies"))
;;   :on-path "challenges")

;; (define-resource technology ()
;;   :class (s-prefix "ed:Technology")
;;   :properties `((:name :string ,(s-prefix "ed:name"))
;;                 (:optional :boolean ,(s-prefix "ed:optional")))
;;   :resource-base (s-url "http://education.com/technologies/")
;;   :on-path "technologies")

;; (define-resource story ()
;;   :class (s-prefix "ed:Story")
;;   :properties `((:description :string ,(s-prefix "dc:description")))
;;   :resource-base (s-url "http://education.com/stories/")
;;   :has-many `((steps :via ,(s-prefix "ed:steps")
;;                      :as "steps"))
;;   :on-path "stories")

;; (define-resource step ()
;;   :class (s-prefix "ed:Step")
;;   :properties `((:title :boolean ,(s-prefix "dc:title")))
;;   :resource-base (s-url "http://education.com/steps/")
;;   :on-path "steps")


;; (define-resource post ()
;;   :class (s-prefix "site:Post")
;;   :properties `((:title :string ,(s-prefix "site:title"))
;;                 (:content :string ,(s-prefix "site:content")))
;;   :has-one `((author :via ,(s-prefix "site:author")
;;                      :as "author"))
;;   :has-many `((comment :via ,(s-prefix "site:comment")
;;                        :as "comments"))
;;   :resource-base (s-url "http://mu.semte.ch/posts/")
;;   :on-path "posts")

;; (define-resource comment ()
;;   :class (s-prefix "site:Comment")
;;   :properties `((:content :string ,(s-prefix "site:content")))
;;   :has-one `((author :via ,(s-prefix "site:author")
;;                      :as "author")
;;              (post :via ,(s-prefix "site:comment")
;;                    :inverse t
;;                    :as "post"))
;;   :resource-base (s-url "http://mu.semte.ch/comments/")
;;   :on-path "comments")

;; (define-resource page ()
;;   :class (s-prefix "site:Page")
;;   :properties `((:title :string ,(s-prefix "site:title"))
;;                 (:content :string ,(s-prefix "site:content")))
;;   :resource-base (s-url "http://mu.semte.ch/pages/")
;;   :has-many `((posts :via ,(s-prefix "site:posts")
;;                      :as "posts"))
;;   :on-path "pages")

;; (define-resource author ()
;;   :class (s-prefix "site:Author")
;;   :properties `((:name :string ,(s-prefix "site:authorName")))
;;   :has-many `((post :via ,(s-prefix "site:author")
;;                     :inverse t
;;                     :as "posts"))
;;   :resource-base (s-url "http://mu.semte.ch/authors/")
;;   :on-path "authors")


;; ;;;; define the resource
;; (define-resource score ()
;;   :class (s-url "music:Score")
;;   :properties `((:title :string ,(s-prefix "nie:title"))
;;                 (:description :string ,(s-prefix "nie:description"))
;;                 (:composer :string ,(s-prefix "music:composer"))
;;                 (:arranger :string ,(s-prefix "music:arranger"))
;;                 (:duration :string ,(s-prefix "dcterms:extent"))
;;                 (:genre :string ,(s-prefix "music:genre"))
;;                 (:publisher :string ,(s-prefix "nco:publisher"))
;;                 (:status :string ,(s-prefix "bravoer:status")))
;;   :resource-base (s-url "http://backstage.bravoer.be/api/scores/")
;;   :has-many `((part :via ,(s-prefix "nie:isLogicalPartOf")
;;                     :inverse t
;;                     :as "parts"))
;;   :on-path "scores")

;; (define-resource part ()
;;   :class (s-url "music:ScorePart")
;;   :properties `((:instrument :url ,(s-prefix "music:instrument"))
;;                 (:instrument-part :string ,(s-prefix "music:instrumentPart"))
;;                 (:key :string ,(s-prefix "music:key"))
;;                 (:clef :string ,(s-prefix "music:clef"))
;;                 (:file :string ,(s-prefix "nfo:fileUrl")))
;;   :resource-base (s-url "http://backstage.bravoer.be/api/score-parts/")
;;   :has-one `((score :via ,(s-prefix "nie:isLogicalPartOf")
;;                     :as "score"))
;;   :on-path "parts")



;;;; mapping pilot

(define-resource taxonomy ()
  :class (s-prefix "mt:Taxonomy")
  :properties `((:name :string ,(s-prefix "mt:name"))
                (:description :string ,(s-prefix "dc:description")))
  :resource-base (s-url "http://mapping-tool.sem.tenforce.com/taxonomies/")
  :has-many `((topic :via ,(s-prefix "mt:taxonomyTopic")
                     :as "topics"))
  :on-path "taxonomies")

(define-resource topic ()
  :class (s-prefix "mt:CursoryTopic")
  :properties `((:name :string ,(s-prefix "mt:name"))
                (:description :string ,(s-prefix "dc:description")))
  :resource-base (s-url "http://mapping-tool.sem.tenforce.com/topics/")
  :has-many `((topic :via ,(s-prefix "mt:topic")
                     :as "topics")
              (mapping :via ,(s-prefix "mt:mapping")
                       :as "mappings"))
  :has-one `((taxonomy :via ,(s-prefix "mt:taxonomyTopic")
                       :inverse t
                       :as "taxonomy"))
  :on-path "topics")

(define-resource mapping ()
  :class (s-prefix "mt:Mapping")
  :has-many `((topic :via ,(s-prefix "mt:maps")
                     :as "topics"))
  :resource-base (s-url "http://mapping-tool.sem.tenforce.com/mappings/")
  :on-path "mappings")
              
                
